Learning git
git installation & setup

*configure git

git config --global (.git-config it will contain our personal data information)

git config --system (data of system users )

git config --local ( particular projects repo information)

git config --global user.name "rajsing" 
git config --global user.email "githubloginmail" 

git config --global -e (to see or edit the global config data)

git config --list (shows the total configuration details).


* help
git help config

* windows configure notepad

install notepad++


after come to c folder + program files *86 + click on notepad++ + under inside application + above copy the path 


this pc + right click + propeties + click on advanced system settings + click on environment variables + under system variable click on path check on click on edit
click on new + paste ur notepad ++ path + ok + ok + ok.


go to git bash type notepad++ filename (it will open your notepad ++ application).

to resize the name
notepad++ .bash_profile
alias code='notepad++ .exe -multiInst -nosession'

save it
type code in gitbash

* to make any code editor as default editor

git config --global core.editor "notepad++ .exe  -multiInst -nosession'



* git work flow

terms
clone
tracked/untracked files (.git it will track everything)
branch

******** heart of git flow
local (working directory + stagging area or indix area + repository .git folder) ==> remote git hub

examples:
terms:
master
origin

the default branch is master according to our requirement we will crete feature branches 
the default server name is origin


create ur folder
clone the github url

make any changes

git staus
now our file in working directory we need to move stagging area for that
git add filename (revert back git restore filename)

git commit -m "message"  (by doing this it will go from staging to local repo)


now from your local repo to remote server you need to push the code.

git push origin master


********* to add an existing github account to code

git remote add origin YOUR_REMOTE_REPOSITORY_URL
** fatal: remote origin already exists.
to solve above issue

git remote set-url origin https://github.com/rajeshsingamsetti/Revision.git

git remote -v

git push -u origin master


* git status shortcuts
git status --short
git status --??
git status --A
git status --M


** ignoring files
vi .gitignore
filename.php (all location file name ignore)
/filename.php (cureent folder file)
* .txt
* .js
!main.js (don't take all js only take main.js file)
build/

**** Git Diff (shows the content where changed (git status will shows the changed file name))

it will shows the difference netween working directory file && stagging directory file

git diff --staged


**** git commit

git commit -v(willl give huge amount information)

git commit -m "message"



**** git log


we will know the complete history about that project

git log 
git log  -p (it will shows the diff between each every 2 commits)

git log -2 (displays the latest 2 commits)
git log --oneline
git log --pretty=oneline
git log --pretty=short
git log --pretty=full


********** git branching *****************
mkdir pro
git init
vi somefile
git add .
git commit -m "message"

** when we commit each time it will create an blob file individually
tree will merge the all the blob files

this is internal background process

now the git log will see 2 commits (as we discuss above concept)

RAJs-MacBook-Pro:branch rajsingam$ git log
commit e975a723745d55469b3253ba7369154146c9f23b (HEAD -> master)
Author: raj singsm <rajeshsingamsetties@gmail.com>
Date:   Sun Jan 31 08:30:50 2021 +0530

    second commit

commit 80e451c26f60f4ef3b78c07df83b4b3d36842117
Author: raj singsm <rajeshsingamsetties@gmail.com>
Date:   Sun Jan 31 08:25:05 2021 +0530

    first file
    
    
note: each and every commit will link to previous commit

***Branch:
it is nothing but a pointer it always points to latest commit

creating a branch

git branch featurename

head (always represent cureent branch to see git log)

to love from one branch to another branch

git checkout branchname

RAJs-MacBook-Pro:branch rajsingam$ git log --oneline
e975a72 (HEAD -> master, sidemenu) second commit
80e451c first file
RAJs-MacBook-Pro:branch rajsingam$ git checkout sidemenu
Switched to branch 'sidemenu'
RAJs-MacBook-Pro:branch rajsingam$ git log --oneline
e975a72 (HEAD -> sidemenu, master) second commit
80e451c first file




above will see after moving other branch it will head represent the current branch)

create one file like sidemenu.txt

git add .
git commit

now move to master branch

git checkout master


now check the log

RAJs-MacBook-Pro:branch rajsingam$ git log --oneline
82e0627 (HEAD -> sidemenu) added sidemenu
e975a72 (master) second commit
80e451c first file
RAJs-MacBook-Pro:branch rajsingam$ git checkout master
Switched to branch 'master'
RAJs-MacBook-Pro:branch rajsingam$ git log --oneline
e975a72 (HEAD -> master) second commit
80e451c first file


above previous side menu branch commit and after master swith only showing master commmits

note : child branch commits not shows in master logs to get all branches info

git log --oneline --all


** now master type (ls) here the child branch file not displaying

now change onefile content in master and commit it

git log --oneline --graph --all (graphical representation)

**** to create a branch and move branch at same time means

git checkout -b mainsection

edit the same master file what u commit

commit it


****** GIT merging

note which branch you are going merget you need to move to that branch in my case i am going master
git checkout master

git merge mainsection(branchname).

** delete a branch


git branch -d branchname

****** merge conflicts
git branch --merge (meging branch details)

git branch --no-merge (meging branch details)


now the same file of master and child made some changes.commit
now merge

git branch --merge branchname

now we will get conflicts

to see the conflicts

git status

now we will see the error file

vi filename (remove conflicts)

git add .
git status


next concepts:


alias
remote branching
stashing
rebase
tagging

********* remote branching
git clone url
after add one file in github
when we will clone git will give default one server name that server name:

git remote
 origin

** fetch && pull

to get remote folder and files to local we will use

git fetch and pull

git fetch (the data will come to remote to local but it won't apply)
git pull (it will take data from remote and apply to local working code)


git fetch origin 
git branch -a

the data will there in origin/master

git merge origin/master
ls


git pull origin master (from remote)

ls the latest data will therein local



*** whenever you do git push you must do git pull
git pull origin master

git push origin master



*** git diff toll
p4merge


****** GIT REBASE


insted of git merge will use rebase
git rebase branchname

git merge and rebase both are same but number commits will lesser in git rebase

ref : https://www.javatpoint.com/git-rebase


git rebase lesser commit history




*** git stashing:(recyclebin)

Sometimes you want to switch the branches, but you are working on an incomplete part of your current project. 
You don't want to make a commit of half-done work. Git stashing allows you to do so. The git stash command enables you to switch branches 
without committing the current branch.

ref url: https://www.javatpoint.com/git-stash

git stash filename

git stash list

git stash apply (latest stash will come)

git stash drop

git stash list

to apply particulat stash

git stash apply stash@{1}




git stash -u 


git stash pop



** creating a branch from stash


git stash branch branch name



** git clean (apply for untracked file) (be careful)

git clean -f -d (-d for directory clean)


** git tagging (version relese ) we can mark those commits

git tag -l


git tag v1.0 (under latest commit tag will create)

if we want add description

git tag -a v2.0 -m "jkfhg"


git tag (will list the tags)


git tag -a v1.0 commitid first 5 letters


git push origin master --tags 


git tag -list "v1.*"








    


















































